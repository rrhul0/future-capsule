datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  userName String?
  name     String?
  image    String?

  accounts Account[]

  authoredCapsules Capsule[] @relation("CapsuleAuthorUser")
  ownedCapsules    Capsule[] @relation("CapsuleOwnedUser")

  recipientServices UserRecipientService[] @relation("UserRecipientService")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserRecipientService {
  id             String               @id @default(cuid())
  name           String?
  type           RecepientServiceType
  serviceValue   String
  defaultEnabled Boolean              @default(true)

  user   User   @relation(fields: [userId], references: [id], name: "UserRecipientService")
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usedByCapsules Capsule[] @relation("CapsuleRecipientService")

  @@unique([userId, type, serviceValue])
  @@map("user_recipient_service")
}

model Capsule {
  id          String        @id @default(cuid())
  content     String
  status      CapsuleStatus @default(NOT_ACCEPTED)
  scheduledTo DateTime

  authorId String
  author   User   @relation("CapsuleAuthorUser", fields: [authorId], references: [id])

  ownerId           String
  owner             User                   @relation("CapsuleOwnedUser", fields: [ownerId], references: [id])
  // if user override the default recipient service
  // make sure capsule only have recipient services owned by owner user
  // also if no recipient service is attached then all of the services are enabled
  recipientServices UserRecipientService[] @relation("CapsuleRecipientService")

  originalCapsuleId String?
  originalCapsule   Capsule?  @relation("CapsuleToCapsule", fields: [originalCapsuleId], references: [id])
  derivedCapsules   Capsule[] @relation("CapsuleToCapsule")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("capsules")
}

enum RecepientServiceType {
  EMAIL
  WHATSAPP
  TELEGRAM
}

enum CapsuleStatus {
  SENT
  QUEUED
  PENDING
  FAILED
  DISABLED
  NOT_ACCEPTED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}
