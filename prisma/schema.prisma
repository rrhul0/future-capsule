datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  userName String  @unique
  name     String?
  image    String?
  nickname String?

  timezone String?
  locale   String  @default("en")

  // Capsules related
  minCapsuleDelay Int @default(1440) // in minutes (cant be less then 24 hours)
  maxCapsuleDelay Int @default(0)

  // Contacts related
  automaticallyAddContactsWhenTheySentCapsule Boolean @default(true)
  automaticallyAcceptCapsuleFromContacts      Boolean @default(true)
  automaticallyAcceptCapsuleFromNonContacts   Boolean @default(false)
  addToContactWhenAllowedToSendCapsules       Boolean @default(true)

  Contacts    User[] @relation("UserContactRelation")
  ContactedBy User[] @relation("UserContactRelation")

  DefaultAcceptUsers User[] @relation("DefaultAcceptUserRelation")
  DefaultAccepedBy   User[] @relation("DefaultAcceptUserRelation")

  BlockedUsers User[] @relation("BlockedUserRelation")
  BlockedBy    User[] @relation("BlockedUserRelation")

  ownedCapsules Capsule[] @relation("CapsuleOwnedUser")

  recipientServices UserRecipientService[] @relation("UserRecipientService")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserRecipientService {
  id             String               @id @default(cuid())
  name           String?
  type           RecepientServiceType
  serviceValue   String
  defaultEnabled Boolean              @default(true)

  user   User   @relation(fields: [userId], references: [id], name: "UserRecipientService", onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usedByCapsules Capsule[] @relation("CapsuleRecipientService")

  connectedByAccount Account[] @relation("ConnectedAccountRecipientService")

  @@unique([type, serviceValue])
  @@map("user_recipient_service")
}

model Capsule {
  id          String   @id @default(cuid())
  content     String
  scheduledTo DateTime

  status        CapsuleStatus        @default(NOT_ACCEPTED)
  sharingAccess CapsuleSharingAccess @default(NO_ONE)

  ownerId           String
  owner             User                   @relation("CapsuleOwnedUser", fields: [ownerId], references: [id])
  // if user override the default recipient service
  // make sure capsule only have recipient services owned by owner user
  // also if no recipient service is attached then all of the services are default enabled
  recipientServices UserRecipientService[] @relation("CapsuleRecipientService")

  parentCapsuleId String?
  parentCapsule   Capsule?  @relation("CapsuleToCapsule", fields: [parentCapsuleId], references: [id])
  childCapsules   Capsule[] @relation("CapsuleToCapsule")

  rootCapsuleId     String?
  rootCapsule       Capsule?  @relation("RootCapsuleToCapsule", fields: [rootCapsuleId], references: [id])
  rootChildCapsules Capsule[] @relation("RootCapsuleToCapsule")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("capsules")
}

enum RecepientServiceType {
  EMAIL
  WHATSAPP
  TELEGRAM
}

enum CapsuleStatus {
  SENT
  QUEUED
  PENDING
  FAILED
  DISABLED
  NOT_ACCEPTED
}

enum CapsuleSharingAccess {
  ANYONE_WITH_LINK
  SPECIFIC_USERS
  NO_ONE
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connectedRecipientService UserRecipientService @relation("ConnectedAccountRecipientService", fields: [userRecipientServiceId], references: [id], onDelete: Cascade)
  userRecipientServiceId    String

  @@id([provider, providerAccountId])
  @@map("accounts")
}
