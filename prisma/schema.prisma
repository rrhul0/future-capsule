datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String                  @id @default(cuid())
  userName          String?
  name              String?
  recipientServices UserRecipientServices[]
  image             String?
  accounts          Account[]
  capsules          Capsule[]               @relation("UserCapsules")
  sharedCapsules    Capsule[]               @relation("UserSharedCapsules")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserRecipientServices {
  id           String               @id @default(cuid())
  name         String?
  User         User                 @relation(fields: [userId], references: [id])
  userId       String
  type         RecepientServiceType
  serviceValue String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CapsuleRecipientServices          CapsuleRecipientServices? @relation(fields: [capsuleRecipientServicesCapsuleId, userId], references: [capsuleId, userId])
  capsuleRecipientServicesCapsuleId String?

  @@unique([userId, type, serviceValue])
  @@map("user_recipient_services")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Capsule {
  id          String        @id @default(cuid())
  content     String
  status      CapsuleStatus @default(PENDING)
  scheduledTo DateTime
  author      User          @relation("UserCapsules", fields: [authorId], references: [id])
  authorId    String
  sharedUsers User[]        @relation("UserSharedCapsules")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("capsules")
}

model CapsuleRecipientServices {
  capsuleId         String
  userId            String
  recipientServices UserRecipientServices[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([capsuleId, userId])
  @@map("capsule_recipients")
}

enum RecepientServiceType {
  EMAIL
  WHATSAPP
  TELEGRAM
}

enum CapsuleStatus {
  SENT
  QUEUED
  PENDING
  FAILED
}
