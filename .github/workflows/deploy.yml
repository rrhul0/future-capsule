name: Deploy App

on:
  push:
    branches:
      - main
      - '**' # All branches for preview deployment

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rrhul0/future-capsule

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: create ssh tunnel
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          DATABASE_PORT=$([[ "$BRANCH_NAME" == "main" ]] && echo "5432" || echo "6432")
          echo "Creating SSH tunnel to ${{ secrets.VPS_HOST }}:${{ secrets.VPS_SSH_PORT }} with database port $DATABASE_PORT"
          ssh -o StrictHostKeyChecking=no -N -f -L 5432:localhost:$DATABASE_PORT -i ~/.ssh/id_rsa -p ${{ secrets.VPS_SSH_PORT }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}
          # Install PostgreSQL client to use pg_isready
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          # Test if database is available using pg_isready
          for i in {1..10}; do
          if pg_isready -h localhost -p 5432; then
            echo "Database is available"
            break
          fi
          echo "Waiting for database to be available..."
          sleep 5
          done
          echo "DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/future-capsule" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          IMAGE_TAG=$([[ "$BRANCH_NAME" == "main" ]] && echo "latest" || echo "$BRANCH_NAME")

          docker build --build-arg DATABASE_URL=$DATABASE_URL -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Deploy Application
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMPOSE_FILE=$([[ "$BRANCH_NAME" == "main" ]] && echo "docker-compose.production.yml" || echo "docker-compose.preview.yml")

          docker pull $REGISTRY/$IMAGE_NAME:$BRANCH_NAME
          docker-compose -f $COMPOSE_FILE up -d
